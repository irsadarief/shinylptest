{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(shinyjs)\nlibrary(RMySQL)\nlibrary(prophet)\nlibrary(DT)\nlibrary(plotly)\n\n#retrieve data dari database\noptions(mysql = list(\n  \"host\" = \"127.0.0.1\",\n  \"port\" = 3306,\n  \"user\" = \"root\",\n  \"password\" = \"\"\n))\ndatabaseName <- \"hargapangan\"\ntable <- \"dataharga\"\nloadData <- function() {\n  # Connect to the database\n  db <- dbConnect(MySQL(), dbname = databaseName, host = options()$mysql$host, \n                  port = options()$mysql$port, user = options()$mysql$user, \n                  password = options()$mysql$password)\n  # Construct the fetching query\n  query <- sprintf(\"SELECT * FROM `dataharga` \", table)\n  # Submit the fetch query and disconnect\n  data <- dbGetQuery(db, query)\n  #dbDisconnect(db)\n  #data\n}\ndata<-loadData()\n\n#close all connections\nkillDbConnections <- function () {\n  \n  all_cons <- dbListConnections(MySQL())\n\n  for(con in all_cons)\n    +  dbDisconnect(con)\n}\nkillDbConnections()\n\n#fungsi mengubah style css\n#sumber : https://stackoverflow.com/questions/31425841/css-for-each-page-in-r-shiny\nmodifyStyle <- function(selector, ...) {\n  values <- as.list(substitute(list(...)))[-1L]\n  parameters <- names(values)\n  args <- Map(function(p, v) paste0(\"'\", p,\"': '\", v,\"'\"), parameters, values)\n  jsc <- paste0(\"$('\",selector,\"').css({\", paste(args, collapse = \", \"),\"});\")\n  shinyjs::runjs(code = jsc)\n}\n\n\nshinyServer(function(input, output, session) {\n  \n  #untuk menaruh navbar jadi align kanan\n  shinyjs::addClass(id = \"action\", class = \"navbar-right\")\n  shinyjs::addClass(id = \"menus\", class = \"navbar-right\")\n  \n  #otomatis tutup aplikasi jika session berakhir\n  session$onSessionEnded(stopApp)\n  \n  observeEvent(input$menus, {\n    currentTab <- input$menus # Name of the current tab\n    if (currentTab != \"Beranda\") {\n      modifyStyle(\"body\", background = \"white\")\n    }else if (currentTab == \"Beranda\") {\n      #tags$style(\"body {background: url(city.jpeg) no-repeat fixed; \n      #        background-size: auto 95%;\n      #          background-color: rgb(245, 248, 250);}\")\n      modifyStyle(\"body\", background = \"url(asd.jpg) center bottom / auto 95% no-repeat fixed\")\n    }\n    \n  })\n  \n  observeEvent(input$country, {\n    if (input$country != \"\") {\n      showElement(selector = \"#menus li a[data-value=Dashboard]\", anim = TRUE)\n      updateTabsetPanel(session, inputId = \"menus\", selected = \"Dashboard\")\n      hideElement(selector = \"#menus li a[data-value=Beranda]\", anim = TRUE)\n    }else {\n      showElement(selector = \"#menus li a[data-value=Beranda]\", anim = TRUE)\n      updateTabsetPanel(session, inputId = \"menus\", selected = \"Beranda\")\n      hideElement(selector = \"#menus li a[data-value=Dashboard]\", anim = TRUE)\n    }\n  })\n    \n  observeEvent(input$country, {\n    updateSelectInput(session, inputId =  \"komoditas\", selected = input$country)\n  })\n  \n  observeEvent(input$komoditas, {\n    komoditas_terpilih<-paste(input$komoditas,\"\")\n    #prophet function\n    testprophet<-cbind(data[,1],as.numeric((data[,input$komoditas])))\n    colnames(testprophet) <- c(\"ds\",\"y\")\n    testprophet <- data.frame(testprophet)\n    testprophet$y <- as.numeric(as.character(testprophet$y))\n    testprophet$ds<-(as.Date(testprophet$ds, format = \"%Y-%m-%d\"))\n    \n    m <- prophet(testprophet, yearly.seasonality = TRUE, daily.seasonality = TRUE)\n    future <- make_future_dataframe(m, periods = 10)\n    forecast <- predict(m, future)\n  })\n  \n  output$ts_plot <- renderPlotly({\n    plot_ly(x = forecast$ds, y =forecast$yhat)\n  })\n  \n  output$ts_plot2 <- renderPlot({\n    prophet_plot_components(m, forecast)\n  })\n  \n  output$tabelprophet <- DT::renderDataTable({\n    DT::datatable(forecast, \n                  options = list(scrollX = TRUE, pageLength = 10, order = list(1, 'desc'))) %>% formatRound(columns=2:17,digits=4)\n  })\n  \n  output$tabel1 <- DT::renderDataTable({\n    DT::datatable(data[, c(1,3:39), drop = FALSE], \n                  options = list(scrollX = TRUE, pageLength = 10),\n                  rownames = FALSE)\n  })\n  \n  output$downloadData <- downloadHandler(\n    filename = function() {\n      paste('data-',Sys.Date(), \".csv\", sep = \"\")\n    },\n    content = function(file) {\n      write.csv(data, file, row.names = FALSE)\n    })\n  \n  \n})\n",
    "created" : 1516636458831.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "886103114",
    "id" : "93B4E469",
    "lastKnownWriteTime" : 1517087687,
    "last_content_update" : 1517087687220,
    "path" : "~/shinylptest/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}